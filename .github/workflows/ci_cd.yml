name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, airflow_docker_pipelines]  # Removed frontend from tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry
          
      - name: Install Dependencies
        run: |
          cd ${{ matrix.service }}
          poetry install
      - name: Run Unit Tests
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          cd ${{ matrix.service }}
          poetry run pytest Unit_Tests --disable-warnings
  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: run-tests
    strategy:
      matrix:
        service: [backend, airflow_docker_pipelines, frontend]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/neu-sa-${{ matrix.service }}:latest ${{ matrix.service }}
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/neu-sa-${{ matrix.service }}:latest
  deploy-backend-frontend:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-images
    strategy:
      matrix:
        service: [backend, frontend]
        gcp_instance: [NEU_SA]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY_NEU_SA }}

      - name: Deploy to GCP VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USERNAME_NEU_SA }}@${{ secrets.GCP_SSH_HOST_NEU_SA }} <<EOF
            docker pull ${{ secrets.DOCKER_USERNAME }}/neu-sa-${{ matrix.service }}:latest
            docker stop neu-sa-${{ matrix.service }} || true
            docker rm neu-sa-${{ matrix.service }} || true
            # Kill any process that may be using the port before deploying
            if [[ "${{ matrix.service }}" == "frontend" ]]; then
              echo "Checking processes on port 8501..."
              sudo lsof -t -i:8501 | xargs sudo kill -9 || true
              docker run -d --name neu-sa-${{ matrix.service }} -p 8501:8501 \
                -e BACKEND_URL=http://34.74.210.110:8000/ \
                ${{ secrets.DOCKER_USERNAME }}/neu-sa-${{ matrix.service }}:latest
            elif [[ "${{ matrix.service }}" == "backend" ]]; then
              echo "Checking processes on port 8000..."
              sudo lsof -t -i:8000 | xargs sudo kill -9 || true
              docker run -d --name neu-sa-${{ matrix.service }} -p 8000:8000 \
                -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
                -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                -e AWS_REGION=${{ secrets.AWS_REGION }} \
                -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
                -e SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }} \
                -e SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }} \
                -e SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }} \
                -e SNOWFLAKE_ROLE=${{ secrets.SNOWFLAKE_ROLE }} \
                -e PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
                -e NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }} \
                -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
                -e TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }} \
                ${{ secrets.DOCKER_USERNAME }}/neu-sa-${{ matrix.service }}:latest
            fi
          EOF
  